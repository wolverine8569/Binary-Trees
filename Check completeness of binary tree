// every node before last level should have two child and last level nodes should be left as much as possible

int height(TreeNode* root){
        if(root==NULL)
            return 0;
        int lf=height(root->left);
        int rf=height(root->right);
        return max(lf,rf)+1;
    }
    bool isCompleteTree(TreeNode* root) {
        int h=height(root);
        h--;
        //cout<<h;
        queue<TreeNode*>q;
        q.push(root);
        int count=1;
        bool p=true;
        while(!q.empty()){
            int n=q.size();
            if(count<h){
                for(int i=0;i<n;i++){
                TreeNode* x=q.front();
                q.pop();
                if(x->left)
                    q.push(x->left);
                else
                    return false;
                if(x->right)
                    q.push(x->right);
                else
                    return false;
                }
            }
            else if(count==h){
                for(int i=0;i<n;i++){
                    TreeNode* x=q.front();
                    //cout<<x->val<<" ";
                    q.pop();
                    if(x->left && p==false)
                        return false;
                    if(!x->left)
                        p=false;
                    if(x->right && p==false)
                        return false;
                    if(!x->right)
                        p=false;
                }
            }
            else
                break;
            count++;
        }
        return true;
    }
